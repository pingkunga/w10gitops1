# CI CD for tag
# 1. read imagename
# 2. modify manifest
# 3. deploy k8s
# 4. notify email

name: NODE_TAG

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
# on:
#   release:
#     types: [published]
env:
    CLUSTER_NAME: https://tcc-01.th1.proen.cloud/api/ 
    
jobs:
    tagProd:
        runs-on: ubuntu-latest
        permissions:
            contents: write
        defaults:
            run:
              working-directory: ./javascript # Here the path to the folder where package-lock.json is located.
        steps:
            - name: Checkout
              uses: actions/checkout@v3
            
            - name: Set variables
              run: |
                  VER=$(cat version.txt)
                  echo "VERSION=$VER" >> $GITHUB_ENV
            
            - name: Echo version
              run: |
                  echo ${{ env.VERSION }}
        
            - name: Replace Docker Image with Commit SHA
              id: Replace_Docker_Image
              uses: mikefarah/yq@master
              with:
                cmd: yq -i '.spec.template.spec.containers.[0].image = "${{ env.VERSION }}"' javascript/manifest/prod/pingw91010.yaml
            
            - name: Echo Yaml After Replace
              run: |
                cat manifest/prod/pingw91010.yaml

            #Note: GitHub ไม่ยอมให้ Commit เข้า Tag ที่มีอยู่แล้ว จึงต้องสร้าง Tag ใหม่ก่อน
            - name: Commit & Push Manifest Changes (PROD)
              run: |
                  git config user.name "GitHub Actions"
                  git config user.email "github-actions@users.noreply.github.com"
                  git tag ${{github.ref_name}}-prod
                  git add manifest/prod/*
                  git commit -m "Update manifest Prod "
                  git push origin ${{github.ref_name}}-prod
            
           #Create Release
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                tag_name: ${{github.ref_name}}-prod
                release_name: Release ${{github.ref_name}}-prod
                draft: false
                prerelease: false
                body: |
                  Release ${{github.ref_name}}-prod
                commitish: ${{github.ref}}
            
    # deploymentProd:
    #     needs: tagProd
    #     runs-on: ubuntu-latest
    #     steps:
    #         - name: 'Authenticate to TCC01'
    #           run: |
    #             kubectl config set-cluster tcc-01 --server=${{ env.CLUSTER_NAME }} 
    #             kubectl config set-context tcc-01 --cluster=tcc-01
    #             kubectl config set-credentials tcc-01-user --token=${{ secrets.TCC01_TOKEN }}
    #             kubectl config set-context tcc-01 --user=tcc-01-user
    #             kubectl config use-context tcc-01
            
    #         - uses: actions/checkout@v3
            
    #         - name: 'Deploy Dev'
    #           run: |
    #             pwd 
    #             kubectl apply -f javascript/manifest/prod/pingconfig.yaml
    #             kubectl apply -f javascript/manifest/prod/pingsecret.yaml
    #             kubectl apply -f javascript/manifest/prod/pingw91010.yaml
    #             kubectl apply -f javascript/manifest/prod/pingw91010-svc.yaml
    #             kubectl apply -f javascript/manifest/prod/pingingress.yaml
                  
    #         #https://github.com/marketplace/actions/send-email
    #         - name: Notify By Email
    #           uses: dawidd6/action-send-mail@v3
    #           with:
    #             server_address: smtp.gmail.com
    #             server_port: 465
    #             username: ${{ secrets.EMAIL_USERNAME }}
    #             password: ${{ secrets.EMAIL_PASSWORD }}
    #             subject: 'Deployment Prod Success'
    #             body: 'Deployment Prod Success'
    #             from: ${{ secrets.EMAIL_USERNAME }}
    #             to: ${{ secrets.EMAIL_TO_LIST }}
    #             content_type: 'text/plain'      